name: MacOS PKG Installer Tests

defaults:
  run:
    shell: bash -l {0}

on:
  pull_request:
    branches: [ "main" ]
    paths:
      - 'MacOS/pkg_installer/**'
      - 'MacOS/Components/**'
      - '.github/workflows/mac_pkg_installer.yml'
  workflow_dispatch:

env:
  PYTHON_VERSION_PS: "3.11"
  PIS_ENV: "CI"

jobs:
  build-and-test-pkg:
    name: Build and Test macOS PKG Installer
    runs-on: macos-latest

    steps:
      - name: Show environment
        run: |
          sw_vers
          uname -a
          echo "Runner temp: $RUNNER_TEMP"
          echo "Runner tools: $RUNNER_TOOL_CACHE"
      - name: Checkout
        uses: actions/checkout@v4

      - name: Build PKG (CI environment)
        working-directory: MacOS/pkg_installer/src
        env:
          BUILD_ENV: github_ci
        run: |
          bash build.sh

      - name: Locate built PKG
        id: find_pkg
        run: |
          PKG_PATH=$(ls -1 MacOS/pkg_installer/builds/*.pkg | tail -n 1)
          echo "pkg_path=$PKG_PATH" >> $GITHUB_OUTPUT
          echo "Found package: $PKG_PATH"

      - name: Install PKG
        run: |
          set -x
          sudo installer -pkg "${{ steps.find_pkg.outputs.pkg_path }}" -target /
        timeout-minutes: 20

      - name: Show PKG postinstall log and app locations
        run: |
          echo "Runner temp: $RUNNER_TEMP"
          for LOG in "$RUNNER_TEMP/macos_dtu_python_install_ci.log" \
                     "/tmp/macos_dtu_python_install_ci.log"; do
            if [[ -f "$LOG" ]]; then
              echo "=== Showing $LOG ==="
              tail -n +1 "$LOG" | sed -n '1,400p'
              break
            fi
          done
          echo "=== /Applications ==="; ls -la "/Applications" | sed -n '1,120p'
          echo "=== $HOME/Applications ==="; ls -la "$HOME/Applications" 2>/dev/null | sed -n '1,120p' || true

      - name: Verify VS Code
        run: |
          echo "PATH: $PATH"
          APP_CLI="/Applications/Visual Studio Code.app/Contents/Resources/app/bin/code"
          APP_CLI_USER="$HOME/Applications/Visual Studio Code.app/Contents/Resources/app/bin/code"
          if command -v code >/dev/null 2>&1; then
            code --version
            exit $?
          elif [[ -x "$APP_CLI" ]]; then
            "$APP_CLI" --version
            exit $?
          elif [[ -x "$APP_CLI_USER" ]]; then
            "$APP_CLI_USER" --version
            exit $?
          else
            echo "VS Code CLI not found. Listing /Applications:"
            ls -la "/Applications" | sed -n '1,50p'
            echo "Listing $HOME/Applications:"
            ls -la "$HOME/Applications" 2>/dev/null | sed -n '1,50p' || true
            echo "VS Code not installed correctly"
            exit 127
          fi

      - name: Verify conda
        run: |
          echo "PATH before verification: $PATH"
          which conda || true
          # add common Homebrew paths to PATH if needed
          export PATH="/opt/homebrew/bin:/usr/local/bin:$PATH"
          which conda
          retval=$?
          if [[ $retval -ne 0 ]]; then
            echo "Conda not installed correctly"
            exit $retval
          fi

          conda --version
          conda info --base

      - name: Verify python (${{ env.PYTHON_VERSION_PS }})
        run: |
          # Prefer conda's Python from the base environment installed by PKG
          export PATH="/opt/homebrew/bin:/usr/local/bin:$PATH"
          which conda
          BASE_DIR=$(conda info --base)
          echo "Conda base: $BASE_DIR"
          PY="$BASE_DIR/bin/python3"
          if [[ ! -x "$PY" ]]; then
            echo "Conda python not found at $PY"
            exit 1
          fi
          EXPECTED_VERSION="${{ env.PYTHON_VERSION_PS }}"
          INSTALLED_VERSION=$($PY --version | cut -d " " -f 2)
          if [[ "$INSTALLED_VERSION" != "$EXPECTED_VERSION"* ]]; then
            echo "Installed Python version ($INSTALLED_VERSION) does not match expected version ($EXPECTED_VERSION)"
            exit 1
          fi
          echo "Correct Python version $INSTALLED_VERSION is installed (conda base)."

          $PY -c "import dtumathtools, pandas, scipy, statsmodels, uncertainties; print('Packages imported successfully')" || { echo "Failed to import Python packages"; exit 1; }

      - name: Run final diagnostics (HTML report)
        env:
          REMOTE_PS: ${{ github.event_name == 'pull_request' && github.event.pull_request.head.repo.full_name || github.repository }}
          BRANCH_PS: ${{ github.event_name == 'pull_request' && github.event.pull_request.head.ref || github.ref_name }}
        run: |
          echo "Running diagnostics from $REMOTE_PS@$BRANCH_PS"
          /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/$REMOTE_PS/$BRANCH_PS/MacOS/Components/Diagnostics/generate_report.sh)"
