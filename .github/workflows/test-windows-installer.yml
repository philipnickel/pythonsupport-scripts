name: Test Windows Installer

on:
  push:
    branches: [ main, develop ]
    paths:
      - 'Windows/**'
      - '.github/workflows/test-windows-installer.yml'
  pull_request:
    branches: [ main ]
    paths:
      - 'Windows/**'
      - '.github/workflows/test-windows-installer.yml'
  workflow_dispatch:

jobs:
  test-windows-10:
    runs-on: windows-2019
    strategy:
      matrix:
        powershell: [ '5.1', '7.x' ]
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Setup PowerShell ${{ matrix.powershell }}
      uses: actions/setup-powershell@v1
      if: matrix.powershell == '7.x'
      with:
        powershell-version: ${{ matrix.powershell }}

    - name: Display system information
      shell: pwsh
      run: |
        Write-Host "OS: $((Get-CimInstance -ClassName Win32_OperatingSystem).Caption)"
        Write-Host "PowerShell: $($PSVersionTable.PSVersion)"
        Write-Host "Architecture: $env:PROCESSOR_ARCHITECTURE"
        Write-Host "User: $env:USERNAME"
        Write-Host "Free Space: $([Math]::Round((Get-PSDrive C).Free / 1GB, 2))GB"

    - name: Test component downloads
      shell: pwsh
      run: |
        Write-Host "Testing component downloads..."
        
        $components = @(
          "Windows/install.ps1",
          "Windows/config.ps1",
          "Windows/Components/Shared/common.ps1",
          "Windows/Components/Shared/windows_dialogs.ps1", 
          "Windows/Components/Python/install.ps1",
          "Windows/Components/Python/first_year_setup.ps1",
          "Windows/Components/VSC/install.ps1",
          "Windows/Components/Core/uninstall_conda.ps1",
          "Windows/Components/Diagnostics/first_year_test.ps1",
          "Windows/Components/Diagnostics/simple_report.ps1"
        )
        
        $failed = @()
        foreach ($component in $components) {
          try {
            $url = "https://raw.githubusercontent.com/$env:GITHUB_REPOSITORY/$env:GITHUB_REF_NAME/$component"
            $response = Invoke-WebRequest -Uri $url -UseBasicParsing -TimeoutSec 30
            if ($response.StatusCode -eq 200 -and $response.Content.Length -gt 100) {
              Write-Host "✓ $component" -ForegroundColor Green
            } else {
              Write-Host "✗ $component (invalid response)" -ForegroundColor Red
              $failed += $component
            }
          } catch {
            Write-Host "✗ $component (failed: $($_.Exception.Message))" -ForegroundColor Red
            $failed += $component
          }
        }
        
        if ($failed.Count -gt 0) {
          Write-Host "Failed components: $($failed -join ', ')" -ForegroundColor Red
          exit 1
        }
        Write-Host "All components downloaded successfully" -ForegroundColor Green

    - name: Test GUI dialogs script
      shell: pwsh
      run: |
        Write-Host "Testing GUI dialogs functionality..."
        
        # Load GUI dialogs script
        $dialogsScript = Get-Content "Windows/Components/Shared/windows_dialogs.ps1" -Raw
        Invoke-Expression $dialogsScript
        
        # Test function availability
        $functions = @("Show-ConfirmationDialog", "Show-InfoDialog", "Show-ErrorDialog", "Show-InstallationSummary")
        foreach ($func in $functions) {
          if (Get-Command $func -ErrorAction SilentlyContinue) {
            Write-Host "✓ Function $func available" -ForegroundColor Green
          } else {
            Write-Host "✗ Function $func missing" -ForegroundColor Red
            exit 1
          }
        }

    - name: Test error handling utilities
      shell: pwsh
      run: |
        Write-Host "Testing error handling utilities..."
        
        # Load common utilities script
        $commonScript = Get-Content "Windows/Components/Shared/common.ps1" -Raw
        Invoke-Expression $commonScript
        
        # Test core functions
        $functions = @("Write-LogInfo", "Write-LogError", "Write-LogSuccess", "Write-LogWarning", "Test-NetworkConnectivity", "Test-SystemRequirements")
        foreach ($func in $functions) {
          if (Get-Command $func -ErrorAction SilentlyContinue) {
            Write-Host "✓ Function $func available" -ForegroundColor Green
          } else {
            Write-Host "✗ Function $func missing" -ForegroundColor Red
            exit 1
          }
        }
        
        # Test system requirements check
        $reqResult = Test-SystemRequirements
        Write-Host "System requirements check: $reqResult"

    - name: Test installation scripts syntax
      shell: pwsh
      run: |
        Write-Host "Testing PowerShell script syntax..."
        
        $scripts = Get-ChildItem -Path "Windows" -Filter "*.ps1" -Recurse
        $syntaxErrors = @()
        
        foreach ($script in $scripts) {
          try {
            $ast = [System.Management.Automation.Language.Parser]::ParseFile($script.FullName, [ref]$null, [ref]$null)
            if ($ast) {
              Write-Host "✓ $($script.Name) - syntax OK" -ForegroundColor Green
            } else {
              $syntaxErrors += $script.Name
            }
          } catch {
            Write-Host "✗ $($script.Name) - syntax error: $($_.Exception.Message)" -ForegroundColor Red
            $syntaxErrors += $script.Name
          }
        }
        
        if ($syntaxErrors.Count -gt 0) {
          Write-Host "Scripts with syntax errors: $($syntaxErrors -join ', ')" -ForegroundColor Red
          exit 1
        }
        Write-Host "All PowerShell scripts have valid syntax" -ForegroundColor Green

    - name: Run installation verification tool
      shell: pwsh
      run: |
        Write-Host "Testing installation verification tool..."
        
        # Run verification script (should fail since nothing is installed)
        try {
          & "Windows/Components/Diagnostics/first_year_test.ps1" -OutputFormat Json -OutputPath "verification_results.json"
        } catch {
          Write-Host "Verification script ran (expected to fail on clean system)" -ForegroundColor Yellow
        }
        
        # Check if JSON output was created
        if (Test-Path "verification_results.json") {
          Write-Host "✓ Verification script created JSON output" -ForegroundColor Green
          $results = Get-Content "verification_results.json" | ConvertFrom-Json
          Write-Host "Overall status: $($results.OverallStatus)" -ForegroundColor Gray
        }

    - name: Run health check tool
      shell: pwsh
      run: |
        Write-Host "Testing health check tool..."
        
        # Run health check (should fail since nothing is installed)
        try {
          & "Windows/Components/Diagnostics/simple_report.ps1"
        } catch {
          Write-Host "Health check ran (expected to fail on clean system)" -ForegroundColor Yellow
        }

  test-windows-11:
    runs-on: windows-2022
    strategy:
      matrix:
        powershell: [ '5.1', '7.x' ]
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Setup PowerShell ${{ matrix.powershell }}
      uses: actions/setup-powershell@v1
      if: matrix.powershell == '7.x'
      with:
        powershell-version: ${{ matrix.powershell }}

    - name: Display system information
      shell: pwsh
      run: |
        Write-Host "OS: $((Get-CimInstance -ClassName Win32_OperatingSystem).Caption)"
        Write-Host "PowerShell: $($PSVersionTable.PSVersion)"
        Write-Host "Architecture: $env:PROCESSOR_ARCHITECTURE"

    - name: Test full installer workflow (dry run)
      shell: pwsh
      run: |
        Write-Host "Testing full installer workflow (syntax and download only)..."
        
        # Set environment variables for testing
        $env:REMOTE_PS = $env:GITHUB_REPOSITORY
        $env:BRANCH_PS = $env:GITHUB_REF_NAME
        $env:PYTHON_VERSION_PS = "3.11"
        
        Write-Host "Testing install.ps1 script loading..."
        
        # Load the main script to test syntax
        try {
          $installContent = Get-Content "Windows/install.ps1" -Raw
          $ast = [System.Management.Automation.Language.Parser]::ParseInput($installContent, [ref]$null, [ref]$null)
          if ($ast) {
            Write-Host "✓ install.ps1 syntax is valid" -ForegroundColor Green
          }
        } catch {
          Write-Host "✗ install.ps1 syntax error: $($_.Exception.Message)" -ForegroundColor Red
          exit 1
        }
        
        Write-Host "Testing config.ps1 script loading..."
        try {
          $configContent = Get-Content "Windows/config.ps1" -Raw
          $ast = [System.Management.Automation.Language.Parser]::ParseInput($configContent, [ref]$null, [ref]$null)
          if ($ast) {
            Write-Host "✓ config.ps1 syntax is valid" -ForegroundColor Green
          }
        } catch {
          Write-Host "✗ config.ps1 syntax error: $($_.Exception.Message)" -ForegroundColor Red
          exit 1
        }

  test-integration:
    runs-on: windows-2022
    if: github.event_name == 'workflow_dispatch' || (github.event_name == 'push' && github.ref == 'refs/heads/main')
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Run full installation test
      shell: pwsh
      timeout-minutes: 30
      run: |
        Write-Host "Running full installation integration test..."
        
        # Set environment for GitHub repository
        $env:REMOTE_PS = $env:GITHUB_REPOSITORY  
        $env:BRANCH_PS = $env:GITHUB_REF_NAME
        $env:PYTHON_VERSION_PS = "3.11"
        
        try {
          # Run installer with GUI disabled
          & "Windows/install.ps1" -UseGUI:$false
          
          Write-Host "Installation completed, running verification..."
          
          # Run verification
          & "Windows/Components/Diagnostics/first_year_test.ps1" -Detailed -OutputFormat Json -OutputPath "integration_results.json"
          
          # Check results
          if (Test-Path "integration_results.json") {
            $results = Get-Content "integration_results.json" | ConvertFrom-Json
            if ($results.OverallStatus) {
              Write-Host "✓ Integration test passed" -ForegroundColor Green
            } else {
              Write-Host "✗ Integration test failed" -ForegroundColor Red
              Write-Host "Failed components:" -ForegroundColor Red
              foreach ($component in $results.Components.PSObject.Properties) {
                if (-not $component.Value.Status) {
                  Write-Host "  - $($component.Name): $($component.Value.Issues -join '; ')" -ForegroundColor Red
                }
              }
              exit 1
            }
          }
          
        } catch {
          Write-Host "Integration test failed with error: $($_.Exception.Message)" -ForegroundColor Red
          exit 1
        }

    - name: Upload test artifacts
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: integration-test-results
        path: |
          integration_results.json
          ${{ env:TEMP }}/dtu_*.log
          ${{ env:TEMP }}/dtu_*.txt
        retention-days: 7

    - name: Test uninstall functionality  
      shell: pwsh
      run: |
        Write-Host "Testing uninstall functionality..."
        
        try {
          # Run uninstaller
          & "Windows/Components/Core/uninstall_conda.ps1" -UseGUI:$false -Force
          
          Write-Host "Uninstall completed, verifying removal..."
          
          # Check that main components are removed
          $issues = @()
          
          try {
            python --version | Out-Null
            if ($LASTEXITCODE -eq 0) {
              $issues += "Python still available"
            }
          } catch { }
          
          try {
            conda --version | Out-Null
            if ($LASTEXITCODE -eq 0) {
              $issues += "Conda still available"
            }
          } catch { }
          
          if ($issues.Count -eq 0) {
            Write-Host "✓ Uninstall verification passed" -ForegroundColor Green
          } else {
            Write-Host "⚠ Uninstall verification issues: $($issues -join ', ')" -ForegroundColor Yellow
            # Don't fail the test as some components might persist
          }
          
        } catch {
          Write-Host "Uninstall test failed with error: $($_.Exception.Message)" -ForegroundColor Red
          exit 1
        }