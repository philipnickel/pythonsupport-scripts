name: Test PKG Installer

defaults:
  run:
    shell: bash -l {0}

on:
  workflow_dispatch:
    inputs:
      branch:
        description: 'Branch to test'
        required: false
        default: 'macos-components'
      clean_install:
        description: 'Clean install (remove existing components first)'
        required: false
        default: 'false'
        type: choice
        options:
          - 'false'
          - 'true'

  pull_request:
    paths:
      - 'MacOS/pkg_installer/**'
      - 'MacOS/Components/**'
      - '.github/workflows/test-pkg-installer.yml'

env:
  PYTHON_VERSION_PS: "3.11"
  PIS_ENV: CI

jobs:
  test-pkg-installer:
    runs-on: macos-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          ref: ${{ inputs.branch || github.head_ref || 'macos-components' }}

      - name: System Information
        run: |
          echo "=== System Information ==="
          sw_vers
          echo ""
          echo "=== Available Space ==="
          df -h /
          echo ""
          echo "=== Pre-test Environment ==="
          command -v brew >/dev/null 2>&1 && echo "✓ Homebrew: $(brew --version | head -1)" || echo "✗ Homebrew: Not installed"
          command -v conda >/dev/null 2>&1 && echo "✓ Conda: $(conda --version)" || echo "✗ Conda: Not installed"  
          command -v code >/dev/null 2>&1 && echo "✓ VSCode: $(code --version | head -1)" || echo "✗ VSCode: Not installed"
          [ -d "/Applications/Visual Studio Code.app" ] && echo "✓ VSCode app found at /Applications" || echo "✗ VSCode app not found"

      - name: Clean Install (Optional)
        if: inputs.clean_install == 'true'
        run: |
          echo "=== Performing Clean Install ==="
          # Remove Homebrew
          if command -v brew >/dev/null 2>&1; then
            echo "Removing Homebrew..."
            /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/uninstall.sh)" <<< $'y\ny\ny\ny\ny' || true
          fi
          
          # Remove Conda/Miniconda
          if [ -d "$HOME/miniconda3" ]; then
            echo "Removing Miniconda..."
            rm -rf "$HOME/miniconda3" || true
          fi
          if [ -d "$HOME/anaconda3" ]; then
            echo "Removing Anaconda..."
            rm -rf "$HOME/anaconda3" || true
          fi
          
          # Remove VSCode
          if [ -d "/Applications/Visual Studio Code.app" ]; then
            echo "Removing Visual Studio Code..."
            sudo rm -rf "/Applications/Visual Studio Code.app" || true
            rm -f /usr/local/bin/code || true
          fi
          
          # Clean shell profiles
          echo "Cleaning shell profiles..."
          sed -i '' '/brew shellenv/d' ~/.zprofile ~/.bash_profile 2>/dev/null || true
          sed -i '' '/conda initialize/,/conda initialize/d' ~/.zprofile ~/.bash_profile 2>/dev/null || true
          
          echo "Clean install preparation complete!"

      - name: Test Pre-built PKG
        working-directory: MacOS/pkg_installer
        run: |
          echo "=== Testing Pre-built PKG ==="
          
          # List available PKG files for testing
          echo "Available PKG files:"
          ls -la builds_for_testing/
          
          # Get the PKG file to test (currently the Homebrew RTF PKG)
          PKG_FILE="builds_for_testing/DTU-Python-FirstYear-v1.1.0-homebrew-rtf.pkg"
          
          if [[ ! -f "$PKG_FILE" ]]; then
            echo "❌ PKG file not found: $PKG_FILE"
            echo "Available files in builds_for_testing/:"
            ls -la builds_for_testing/ || echo "Directory not found"
            exit 1
          fi
          
          echo "PKG_FILE=$PKG_FILE" >> $GITHUB_ENV
          echo "📦 Testing PKG file: $PKG_FILE"
          
          echo "=== Package Information ==="
          installer -pkginfo -pkg "$PKG_FILE"

      - name: Install PKG
        working-directory: MacOS/pkg_installer
        run: |
          echo "=== Installing PKG ==="
          echo "Installing: $PKG_FILE"
          
          # Get absolute path for the PKG file
          PKG_ABSOLUTE_PATH="$(pwd)/$PKG_FILE"
          echo "Absolute path: $PKG_ABSOLUTE_PATH"
          
          # Verify PKG file exists
          if [[ ! -f "$PKG_ABSOLUTE_PATH" ]]; then
            echo "❌ PKG file not found at: $PKG_ABSOLUTE_PATH"
            ls -la "$(dirname "$PKG_ABSOLUTE_PATH")"
            exit 1
          fi
          
          # Install with verbose logging
          sudo installer -verbose -pkg "$PKG_ABSOLUTE_PATH" -target / 2>&1 | tee installation.log
          
          echo ""
          echo "=== Installation Log Summary ==="
          # Show key progress indicators from the log
          grep -E "(DTU Python Installer:|ERROR|WARNING|✓|❌|🚀|⏭️)" installation.log || echo "No progress indicators found"

      - name: Show Debug Logs
        run: |
          echo "=== Debug Logs from PKG Installation ==="
          if [[ -f "/tmp/macos_dtu_python_install.log" ]]; then
            echo "📋 Found installation log at /tmp/macos_dtu_python_install.log"
            echo ""
            echo "=== Last 100 lines of installation log ==="
            tail -100 /tmp/macos_dtu_python_install.log
          else
            echo "❌ Installation log not found at /tmp/macos_dtu_python_install.log"
            echo "Available files in /tmp:"
            ls -la /tmp/macos_* 2>/dev/null || echo "No macos_* files in /tmp"
          fi

      - name: Verify Homebrew PKG Installation
        run: |
          echo "=== Homebrew PKG Installation Verification ==="
          
          # Check that PKG files were installed correctly
          echo "Checking installed files..."
          if [ -f "/usr/local/share/dtu-pythonsupport/install.sh" ]; then
            echo "✓ Main installer script found"
          else
            echo "❌ Main installer script not found"
            exit 1
          fi
          
          if [ -f "/usr/local/share/dtu-pythonsupport/.pkg_status" ]; then
            echo "✓ PKG status file found"
            echo "Status file contents:"
            cat "/usr/local/share/dtu-pythonsupport/.pkg_status"
          else
            echo "❌ PKG status file not found"
            exit 1
          fi
          
          # Check Homebrew component files
          if [ -f "/usr/local/share/dtu-pythonsupport/Components/Homebrew/install.sh" ]; then
            echo "✓ Homebrew component found"
          else
            echo "❌ Homebrew component not found"
            exit 1
          fi
          
          # Check shared utilities
          if [ -f "/usr/local/share/dtu-pythonsupport/Components/Shared/master_utils.sh" ]; then
            echo "✓ Shared utilities found"
          else
            echo "❌ Shared utilities not found"
            exit 1
          fi
          
          echo ""
          echo "✅ Homebrew PKG verification complete"

      - name: Verify Homebrew Installation (Phase 2)
        run: |
          echo "=== Verifying Homebrew Installation ==="
          
          # Update environment to find brew
          hash -r 2>/dev/null || true
          
          # Check Homebrew installation
          if command -v brew >/dev/null 2>&1; then
            echo "✓ Homebrew command available in PATH"
            echo "  Version: $(brew --version | head -1)"
            echo "  Location: $(which brew)"
          else
            echo "❌ Homebrew not found in PATH"
            # Try common locations
            if [ -f "/opt/homebrew/bin/brew" ]; then
              echo "  Found at: /opt/homebrew/bin/brew"
              eval "$(/opt/homebrew/bin/brew shellenv)"
              echo "✓ Homebrew available after shellenv: $(brew --version | head -1)"
            elif [ -f "/usr/local/bin/brew" ]; then
              echo "  Found at: /usr/local/bin/brew"
              eval "$(/usr/local/bin/brew shellenv)"
              echo "✓ Homebrew available after shellenv: $(brew --version | head -1)"
            else
              echo "❌ Homebrew not found in common locations"
              exit 1
            fi
          fi
          
          # Test basic Homebrew functionality
          echo ""
          echo "Testing Homebrew functionality..."
          brew --config | head -5
          echo "✅ Homebrew verification complete"

      - name: Upload Installation Artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: installation-logs-${{ runner.os }}-${{ github.run_id }}
          path: |
            installation.log
            /tmp/macos_dtu_python_install.log
            /tmp/diagnostic_report_*.html
          retention-days: 7

      - name: Show Homebrew PKG Installation Summary  
        if: always()
        run: |
          echo "=== Homebrew PKG Installation Summary ==="
          echo "PKG File: $PKG_FILE"
          echo "Test Date: $(date)"
          echo "macOS Version: $(sw_vers -productVersion)"
          echo ""
          
          # Status check for Homebrew PKG
          PKG_INSTALLED=$([ -f "/usr/local/share/dtu-pythonsupport/.pkg_status" ] && echo "✓" || echo "❌")
          INSTALLER_SCRIPT=$([ -x "/usr/local/share/dtu-pythonsupport/install.sh" ] && echo "✓" || echo "❌")
          HOMEBREW_COMPONENT=$([ -f "/usr/local/share/dtu-pythonsupport/Components/Homebrew/install.sh" ] && echo "✓" || echo "❌")
          
          # Check if Homebrew is actually installed and working
          HOMEBREW_INSTALLED="❌"
          if command -v brew >/dev/null 2>&1; then
            HOMEBREW_INSTALLED="✓"
          elif [ -f "/opt/homebrew/bin/brew" ] || [ -f "/usr/local/bin/brew" ]; then
            # Try to load Homebrew environment
            for brew_path in "/opt/homebrew/bin/brew" "/usr/local/bin/brew"; do
              if [ -f "$brew_path" ]; then
                eval "$($brew_path shellenv)" 2>/dev/null || true
                command -v brew >/dev/null 2>&1 && HOMEBREW_INSTALLED="✓" && break
              fi
            done
          fi
          
          echo "Homebrew PKG Status:"
          echo "  PKG Files Installed: $PKG_INSTALLED"
          echo "  Installer Script Executable: $INSTALLER_SCRIPT"
          echo "  Homebrew Component Present: $HOMEBREW_COMPONENT"
          echo "  Homebrew Actually Installed: $HOMEBREW_INSTALLED"
          
          # Determine overall success for Homebrew PKG
          if [[ "$PKG_INSTALLED$INSTALLER_SCRIPT$HOMEBREW_COMPONENT$HOMEBREW_INSTALLED" == "✓✓✓✓" ]]; then
            echo ""
            echo "🎉 Homebrew PKG Installation Test: SUCCESS"
            echo "Phase 2 - Homebrew component verified!"
            echo "Ready to add Python/Miniconda component."
            exit 0
          else
            echo ""
            echo "❌ Homebrew PKG Installation Test: FAILED"
            echo "Homebrew component not working properly."
            echo "Status: PKG=$PKG_INSTALLED Script=$INSTALLER_SCRIPT Component=$HOMEBREW_COMPONENT Homebrew=$HOMEBREW_INSTALLED"
            exit 1
          fi