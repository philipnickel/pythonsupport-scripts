name: MacOS_autoInstall

defaults:
  run:
    shell: bash -l {0}

on:
  pull_request:
    branches: [ "main" ]
    paths:
      - 'MacOS/**'
      - '.github/workflows/MacOS_autoInstall.yml'
  push:
    branches: [ "main" ]
    paths:
      - 'MacOS/**'
      - '.github/workflows/MacOS_autoInstall.yml'
  workflow_dispatch:
    inputs:
      pkg_path:
        description: 'Path to PKG file to test'
        required: false
        type: string

env:
  PYTHON_VERSION_PS: "3.11"
  PIS_ENV: "CI"

jobs:
  test-installer:
    name: Test DTU Python Installation - ${{ matrix.scenario }}
    runs-on: macos-latest
    
    strategy:
      matrix:
        include:
          - scenario: "Clean Installation"
            setup: "clean"
            input: ""
          - scenario: "Existing Conda (Auto-Uninstall)"
            setup: "existing-conda"
            input: "yes"
          - scenario: "Existing Miniforge (Missing Packages)"
            setup: "existing-miniforge-no-packages"
            input: "n"
          - scenario: "Existing VS Code (Missing Extensions)"
            setup: "existing-vscode"
            input: ""
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup test scenario - Clean Installation
        if: matrix.setup == 'clean'
        run: |
          echo "Setting up clean installation test"
          # Remove any existing conda
          if type conda > /dev/null 2>/dev/null; then
            conda init --reverse --all
          fi

      - name: Setup test scenario - Existing Conda
        if: matrix.setup == 'existing-conda'
        run: |
          echo "Setting up existing conda test"
          # Install miniconda to simulate existing installation
          curl -fsSL https://repo.anaconda.com/miniconda/Miniconda3-latest-MacOSX-$(uname -m).sh -o /tmp/miniconda.sh
          bash /tmp/miniconda.sh -b -p $HOME/miniconda3
          rm -f /tmp/miniconda.sh
          echo "$HOME/miniconda3/bin" >> $GITHUB_PATH

      - name: Setup test scenario - Existing Miniforge without packages
        if: matrix.setup == 'existing-miniforge-no-packages'
        run: |
          echo "Setting up existing miniforge without packages test"
          # Install miniforge but don't install DTU packages
          curl -fsSL https://github.com/conda-forge/miniforge/releases/latest/download/Miniforge3-MacOSX-$(uname -m).sh -o /tmp/miniforge.sh
          bash /tmp/miniforge.sh -b -p $HOME/miniforge3
          rm -f /tmp/miniforge.sh
          
          # Add to PATH
          echo "$HOME/miniforge3/bin" >> $GITHUB_PATH
          
          # Install Python 3.11 but NOT the DTU packages
          source $HOME/miniforge3/bin/activate
          conda install python=3.11 -y

      - name: Setup test scenario - Existing VS Code
        if: matrix.setup == 'existing-vscode'
        run: |
          echo "Setting up existing VS Code test"
          # Download and install VS Code without extensions
          curl -fsSL https://update.code.visualstudio.com/latest/darwin-universal/stable -o /tmp/vscode.zip
          unzip -q /tmp/vscode.zip -d /tmp/
          sudo mv "/tmp/Visual Studio Code.app" /Applications/
          rm -f /tmp/vscode.zip
          
          # Add code command to PATH
          sudo ln -sf "/Applications/Visual Studio Code.app/Contents/Resources/app/bin/code" /usr/local/bin/code

      - name: Run DTU Python Installer
        env:
          REMOTE_PS: ${{ github.event_name == 'pull_request' && github.event.pull_request.head.repo.full_name || github.repository }}
          BRANCH_PS: ${{ github.event_name == 'pull_request' && github.event.pull_request.head.ref || github.ref_name }}
        run: |
          echo "Testing ${{ matrix.scenario }} from: $REMOTE_PS/$BRANCH_PS"
          if [ -n "${{ matrix.input }}" ]; then
            printf "%s\n" "${{ matrix.input }}" | /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/$REMOTE_PS/$BRANCH_PS/MacOS/install.sh)"
          else
            /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/$REMOTE_PS/$BRANCH_PS/MacOS/install.sh)"
          fi

      - name: Verify Installation - VS Code
        run: |
          echo "Verifying VS Code installation..."
          code --version || {
            echo "ERROR: VS Code not installed properly"
            exit 1
          }

      - name: Verify Installation - Conda
        run: |
          echo "Verifying conda installation..."
          which conda || {
            echo "ERROR: Conda not found"
            exit 1
          }
          
          conda --version
          conda info --base
          
          # Should be miniforge
          if ! conda info --base | grep -q "miniforge3"; then
            echo "ERROR: Not using miniforge"
            exit 1
          fi

      - name: Verify Installation - Python Version
        run: |
          echo "Verifying Python version..."
          which python3
          
          EXPECTED_VERSION="3.11"
          INSTALLED_VERSION=$(python3 --version | cut -d " " -f 2)
          if [[ "$INSTALLED_VERSION" != "$EXPECTED_VERSION"* ]]; then
            echo "ERROR: Python version ($INSTALLED_VERSION) does not match expected ($EXPECTED_VERSION)"
            exit 1
          fi
          echo "âœ“ Correct Python version $INSTALLED_VERSION"

      - name: Verify Installation - DTU Packages
        run: |
          echo "Verifying DTU packages..."
          python3 -c "import dtumathtools, pandas, scipy, statsmodels, uncertainties; print('âœ“ All DTU packages imported successfully')" || {
            echo "ERROR: Failed to import DTU packages"
            exit 1
          }

      - name: Verify Installation - VS Code Extensions
        run: |
          echo "Verifying VS Code extensions..."
          code --list-extensions
          
          # Should have Python extension at minimum
          if ! code --list-extensions | grep -q "ms-python.python"; then
            echo "ERROR: Python extension not installed"
            exit 1
          fi
          echo "âœ“ Python extension installed"

      - name: Final Verification Summary
        run: |
          echo ""
          echo "ðŸŽ‰ Installation Verification Complete!"
          echo "======================================"
          echo "âœ“ VS Code: $(code --version | head -1)"
          echo "âœ“ Conda: $(conda --version)"
          echo "âœ“ Python: $(python3 --version)"
          echo "âœ“ DTU Packages: All imported successfully"
          echo "âœ“ VS Code Extensions: Python extension installed"
          echo ""
          echo "Test scenario '${{ matrix.scenario }}' passed all verifications!"