name: MacOS_autoInstall

defaults:
  run:
    shell: bash -l {0}

on:
  pull_request:
    branches: [ "main" ]
    paths:
      - 'MacOS/**'
      - '.github/workflows/MacOS_autoInstall.yml'
  push:
    branches: [ "main" ]
    paths:
      - 'MacOS/**'
      - '.github/workflows/MacOS_autoInstall.yml'
  workflow_dispatch:
    inputs:
      pkg_path:
        description: 'Path to PKG file to test'
        required: false
        type: string

env:
  PYTHON_VERSION_PS: "3.11"
  PIS_ENV: "CI"

jobs:
  test-installer:
    name: Test DTU Python Installation
    runs-on: macos-latest
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Remove conda (if present)
        run: |
          if type conda > /dev/null ; then
            echo "Base environment location:"
            conda info --base

            echo "Removing conda from the environment..."
            # try and disable things in the boot-up scripts
            conda init --reverse --all
          fi

          for f in bash_profile bashrc xonshrc
          do
            [ ! -e $HOME/.$f ] && continue
            echo ""
            echo "<<< .$f >>>"
            cat $HOME/.$f
          done

      - name: Check for conda
        run: |
          env | grep -i conda || echo "No conda environment variables found"
          if type conda > /dev/null ; then
            echo "Base environment location:"
            conda info --base
          else
            echo "Conda not found..."
          fi

          for f in bash_profile bashrc xonshrc
          do
            [ ! -e $HOME/.$f ] && continue
            echo ""
            echo "<<< .$f >>>"
            cat $HOME/.$f
          done

      - name: Run First Year Orchestrator
        env:
          REMOTE_PS: ${{ github.event_name == 'pull_request' && github.event.pull_request.head.repo.full_name || github.repository }}
          BRANCH_PS: ${{ github.event_name == 'pull_request' && github.event.pull_request.head.ref || github.ref_name }}
          PIS_VERBOSE: true
        run: |
          echo "Testing First Year Installation from: $REMOTE_PS/$BRANCH_PS"
          /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/$REMOTE_PS/$BRANCH_PS/MacOS/install.sh)"

      - name: Verify VS Code
        run: |
          code --version
          retval=$?
          if [[ $retval -ne 0 ]]; then
            echo "VS Code not installed correctly"
            exit $retval
          fi

      - name: Verify conda
        run: |
          which conda
          retval=$?
          if [[ $retval -ne 0 ]]; then
            echo "Conda not installed correctly"
            exit $retval
          fi

          # Some more output
          conda --version
          conda info --base

      - name: Verify python (3.11)
        run: |
          which python3

          # Verify the installed Python version
          EXPECTED_VERSION="3.11"
          INSTALLED_VERSION=$(python3 --version | cut -d " " -f 2)
          if [[ "$INSTALLED_VERSION" != "$EXPECTED_VERSION"* ]]; then
            echo "Installed Python version ($INSTALLED_VERSION) does not match expected version ($EXPECTED_VERSION)"
            exit 1
          fi
          echo "Correct Python version $INSTALLED_VERSION is installed."

          # Verify Python package imports
          python3 -c "import dtumathtools, pandas, scipy, statsmodels, uncertainties; print('Packages imported successfully')" || { echo "Failed to import Python packages"; exit 1; }

  test-existing-conda:
    name: Test with Existing Conda Installation
    runs-on: macos-latest
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install existing conda (miniconda)
        run: |
          # Install miniconda to simulate existing installation
          curl -fsSL https://repo.anaconda.com/miniconda/Miniconda3-latest-MacOSX-$(uname -m).sh -o /tmp/miniconda.sh
          bash /tmp/miniconda.sh -b -p $HOME/miniconda3
          rm -f /tmp/miniconda.sh
          echo "$HOME/miniconda3/bin" >> $GITHUB_PATH

      - name: Verify existing conda
        run: |
          conda --version
          conda info --base

      - name: Run installer with existing conda (auto-uninstall)
        env:
          REMOTE_PS: ${{ github.event_name == 'pull_request' && github.event.pull_request.head.repo.full_name || github.repository }}
          BRANCH_PS: ${{ github.event_name == 'pull_request' && github.event.pull_request.head.ref || github.ref_name }}
        run: |
          echo "Testing installation with existing conda from: $REMOTE_PS/$BRANCH_PS"
          # Answer 'y' to uninstall conda, then 'yes' to confirm uninstall
          echo -e "y\nyes" | /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/$REMOTE_PS/$BRANCH_PS/MacOS/install.sh)"

      - name: Verify final installation
        run: |
          # Should still have working Python and packages
          which python3
          python3 --version
          
          # This MUST succeed or workflow fails
          python3 -c "import dtumathtools, pandas, scipy, statsmodels, uncertainties; print('All packages work with existing conda')" || {
            echo "ERROR: DTU packages not installed properly"
            exit 1
          }
          
          # Should have VS Code
          code --version || {
            echo "ERROR: VS Code not installed properly"  
            exit 1
          }

  test-existing-miniforge-no-packages:
    name: Test with Miniforge but Missing Packages
    runs-on: macos-latest
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install miniforge without DTU packages
        run: |
          # Install miniforge but don't install DTU packages
          curl -fsSL https://github.com/conda-forge/miniforge/releases/latest/download/Miniforge3-MacOSX-$(uname -m).sh -o /tmp/miniforge.sh
          bash /tmp/miniforge.sh -b -p $HOME/miniforge3
          rm -f /tmp/miniforge.sh
          
          # Add to PATH
          echo "$HOME/miniforge3/bin" >> $GITHUB_PATH
          
          # Install Python 3.11 but NOT the DTU packages
          source $HOME/miniforge3/bin/activate
          conda install python=3.11 -y

      - name: Verify miniforge without packages
        run: |
          conda --version
          python3 --version
          # This should fail - no DTU packages installed
          python3 -c "import sys; print('Python works but DTU packages should be missing')"

      - name: Run installer with existing miniforge
        env:
          REMOTE_PS: ${{ github.event_name == 'pull_request' && github.event.pull_request.head.repo.full_name || github.repository }}
          BRANCH_PS: ${{ github.event_name == 'pull_request' && github.event.pull_request.head.ref || github.ref_name }}
        run: |
          echo "Testing installation with existing miniforge from: $REMOTE_PS/$BRANCH_PS"
          # Answer 'n' to NOT cancel installation (continue to add packages)
          echo "n" | /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/$REMOTE_PS/$BRANCH_PS/MacOS/install.sh)"

      - name: Verify final installation with packages
        run: |
          # Should now have all DTU packages
          which python3
          python3 --version
          
          # This MUST succeed or workflow fails
          python3 -c "import dtumathtools, pandas, scipy, statsmodels, uncertainties; print('All DTU packages now installed')" || {
            echo "ERROR: DTU packages not installed properly after installer run"
            exit 1
          }
          
          # Should have VS Code
          code --version || {
            echo "ERROR: VS Code not installed properly"
            exit 1
          }

  test-existing-vscode-no-extensions:
    name: Test with VS Code but Missing Extensions
    runs-on: macos-latest
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install VS Code without extensions
        run: |
          # Download and install VS Code
          curl -fsSL https://update.code.visualstudio.com/latest/darwin-universal/stable -o /tmp/vscode.zip
          unzip -q /tmp/vscode.zip -d /tmp/
          sudo mv "/tmp/Visual Studio Code.app" /Applications/
          rm -f /tmp/vscode.zip
          
          # Add code command to PATH
          sudo ln -sf "/Applications/Visual Studio Code.app/Contents/Resources/app/bin/code" /usr/local/bin/code

      - name: Verify VS Code without extensions
        run: |
          code --version
          # List extensions (should be minimal/none)
          code --list-extensions

      - name: Run installer with existing VS Code
        env:
          REMOTE_PS: ${{ github.event_name == 'pull_request' && github.event.pull_request.head.repo.full_name || github.repository }}
          BRANCH_PS: ${{ github.event_name == 'pull_request' && github.event.pull_request.head.ref || github.ref_name }}
        run: |
          echo "Testing installation with existing VS Code from: $REMOTE_PS/$BRANCH_PS"
          /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/$REMOTE_PS/$BRANCH_PS/MacOS/install.sh)"

      - name: Verify final installation with extensions
        run: |
          # Should have Python and packages
          which python3
          python3 --version  
          
          # This MUST succeed or workflow fails
          python3 -c "import dtumathtools, pandas, scipy, statsmodels, uncertainties; print('Python packages installed')" || {
            echo "ERROR: DTU packages not installed properly"
            exit 1
          }
          
          # Should still have VS Code but now with extensions
          code --version || {
            echo "ERROR: VS Code not working properly"
            exit 1
          }
          
          echo "Installed extensions:"
          code --list-extensions
          
          # Should have Python extension at minimum
          if ! code --list-extensions | grep -q "ms-python.python"; then
            echo "ERROR: Python extension not installed"
            exit 1
          fi

