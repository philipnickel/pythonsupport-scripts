name: Mac tests

defaults:
  run:
    shell: bash -l {0}

on:
  pull_request:
    branches: [ "main" ]
  workflow_dispatch:
  schedule:
    - cron: "0 0 * * 0"  # Run every Sunday at midnight UTC

jobs:
  test_macos:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [macos-latest, macos-12]  # Test on different macOS versions
        python-version: ["3.10", "3.11"]  # Test multiple Python versions

    steps:
      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      - name: Checkout code
        uses: actions/checkout@v4

      #- name: Show context
      #  env:
      #    GITHUB_CONTEXT: ${{ toJSON(github) }}
      #  run: |
      #    echo "Context: $GITHUB_CONTEXT"

      - name: Installation from main
        if: ${{ github.event_name == 'schedule' || github.event_name == 'workflow_dispatch' }}
        env:
          PYTHON_VERSION_PS: ${{ matrix.python-version }}
        run: |
          echo "Running script from remote dtudk on branch main with Python $PYTHON_VERSION_PS"
          /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/dtudk/pythonsupport-scripts/main/MacOS_AutoInstall.sh)"

      - name: Branch specific installation
        if: ${{ github.event_name != 'schedule' && github.event_name != 'workflow_dispatch' }}
        env:
          # TODO, this will *not* catch when a user forks the repo, and change the name of the project
          REMOTE_PS: ${{ github.event.pull_request.head.repo.full_name }}
          BRANCH_PS: ${{ github.event.pull_request.head.ref }}
          PYTHON_VERSION_PS: ${{ matrix.python-version }}
        run: |
          echo "Running script from remote $REMOTE_PS on branch $BRANCH_PS with Python $PYTHON_VERSION_PS"
          /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/$REMOTE_PS/$BRANCH_PS/MacOS_AutoInstall.sh)"

      - name: Verification
        run: |
          # Verify the installed Python version
          EXPECTED_VERSION="${{ matrix.python-version }}"
          INSTALLED_VERSION=$(python3 --version | cut -d " " -f 2)
          if [[ "$INSTALLED_VERSION" != "$EXPECTED_VERSION"* ]]; then
            echo "Installed Python version ($INSTALLED_VERSION) does not match expected version ($EXPECTED_VERSION)"
            exit 1
          fi
          echo "Correct Python version $INSTALLED_VERSION is installed."

          # Verify Python location
          which python3

          # Check VS Code
          code --version || { echo "VS Code not installed correctly"; exit 1; }

          # Check Conda
          conda --version || { echo "Conda not installed correctly"; exit 1; }
          which conda
          
          # Verify Python package imports
          python3 -c "import dtumathtools; import uncertainties; print('Packages imported successfully')" || { echo "Failed to import Python packages"; exit 1; }
