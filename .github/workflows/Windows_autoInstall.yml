name: Windows_autoInstall

defaults:
  run:
    shell: pwsh

on:
  pull_request:
    branches: [ "main" ]
    paths:
      - 'Windows/**'
      - '.github/workflows/Windows_autoInstall.yml'
      - 'dev_plan_miniforge_windows.md'
  push:
    branches: [ "main" ]
    paths:
      - 'Windows/**'
      - '.github/workflows/Windows_autoInstall.yml'
      - 'dev_plan_miniforge_windows.md'

env:
  PYTHON_VERSION_PS: "3.11"
  PIS_ENV: "CI"

jobs:
  test-installer:
    name: Test Windows Installer
    runs-on: windows-latest
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Remove conda (if present)
        run: |
          if (Get-Command conda -ErrorAction SilentlyContinue) {
            Write-Host "Base environment location:"
            conda info --base

            Write-Host "Removing conda from the environment..."
            # try and disable things in the boot-up scripts
            conda init --reverse --all
          }

          # Show PowerShell profiles
          $profilePaths = @($PROFILE.CurrentUserAllHosts, $PROFILE.CurrentUserCurrentHost)
          foreach ($profilePath in $profilePaths) {
            if (Test-Path $profilePath) {
              Write-Host "Profile: $profilePath"
              Get-Content $profilePath
            }
          }

      - name: Check for conda
        run: |
          $env:Path -split ';' | Where-Object { $_ -like "*conda*" } | ForEach-Object { Write-Host "Conda path: $_" }
          if (Get-Command conda -ErrorAction SilentlyContinue) {
            Write-Host "Base environment location:"
            conda info --base
          } else {
            Write-Host "Conda not found..."
          }

          # Show PowerShell profiles
          $profilePaths = @($PROFILE.CurrentUserAllHosts, $PROFILE.CurrentUserCurrentHost)
          foreach ($profilePath in $profilePaths) {
            if (Test-Path $profilePath) {
              Write-Host "Profile: $profilePath"
              Get-Content $profilePath
            }
          }

      - name: Run Windows Installer
        env:
          REMOTE_PS: ${{ github.event_name == 'pull_request' && github.event.pull_request.head.repo.full_name || github.repository }}
          BRANCH_PS: ${{ github.event_name == 'pull_request' && github.event.pull_request.head.ref || github.ref_name }}
          GITHUB_CI: true
        run: |
          Write-Host "Testing Windows installer from: $env:REMOTE_PS/$env:BRANCH_PS"
          
          # Set execution policy
          Set-ExecutionPolicy -ExecutionPolicy RemoteSigned -Scope CurrentUser -Force
          
          # Run the installer with non-interactive mode
          $installerUrl = "https://raw.githubusercontent.com/$env:REMOTE_PS/$env:BRANCH_PS/Windows/install.ps1"
          $installerScript = Invoke-WebRequest -Uri $installerUrl -UseBasicParsing
          Invoke-Expression $installerScript.Content

      - name: Verify VS Code
        run: |
          $env:Path = [System.Environment]::GetEnvironmentVariable("Path", [System.EnvironmentVariableTarget]::User)
          try {
            Get-Command code
            code --version
          } catch {
            Write-Output "VS Code not installed correctly"
            Write-Output $_
            exit 1
          }

      - name: Verify conda
        run: |
          try {
            Get-Command conda
            conda --version
            conda info --base
          } catch {
            Write-Output "Conda not installed correctly"
            Write-Output $_
            exit 1
          }

      - name: Verify python (3.11)
        run: |
          Get-Command python

          # Verify the installed Python version
          $expectedVersion = "3.11"
          $condaPythonPath = "C:\Users\$env:USERNAME\miniforge3\python.exe"
          $installedVersion = (& $condaPythonPath --version 2>&1) -replace "Python ", ""
          if (-not $installedVersion.StartsWith($expectedVersion)) {
            Write-Output "Installed Python version ($installedVersion) does not match expected version ($expectedVersion)"
            exit 1
          }
          Write-Output "Correct Python version $installedVersion is installed."

          # Verify Python package imports
          try {
            & $condaPythonPath -c "import pandas, scipy, statsmodels, uncertainties; print('Packages imported successfully')"
          } catch {
            Write-Output "Failed to import Python packages"
            Write-Output $_
            exit 1
          }

