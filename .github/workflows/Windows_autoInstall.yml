name: Windows_autoInstall

defaults:
  run:
    shell: pwsh

on:
  pull_request:
    branches: [ "main" ]
    paths:
      - 'Windows/**'
      - 'windows_releases/**'
      - '.github/workflows/Windows_autoInstall.yml'
      - 'dev_plan_miniforge_windows.md'
  push:
    branches: [ "main" ]
    paths:
      - 'Windows/**'
      - 'windows_releases/**'
      - '.github/workflows/Windows_autoInstall.yml'
      - 'dev_plan_miniforge_windows.md'

env:
  PYTHON_VERSION_PS: "3.11"
  PIS_ENV: "CI"

jobs:
  test-release-installer:
    name: Test Windows Release .bat Installer
    runs-on: windows-latest
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Remove conda (if present)
        run: |
          if (Get-Command conda -ErrorAction SilentlyContinue) {
            Write-Host "Base environment location:"
            conda info --base

            Write-Host "Removing conda from the environment..."
            # try and disable things in the boot-up scripts
            conda init --reverse --all
          }

          # Show PowerShell profiles
          $profilePaths = @($PROFILE.CurrentUserAllHosts, $PROFILE.CurrentUserCurrentHost)
          foreach ($profilePath in $profilePaths) {
            if (Test-Path $profilePath) {
              Write-Host "Profile: $profilePath"
              Get-Content $profilePath
            }
          }

      - name: Check for conda
        run: |
          $env:Path -split ';' | Where-Object { $_ -like "*conda*" } | ForEach-Object { Write-Host "Conda path: $_" }
          if (Get-Command conda -ErrorAction SilentlyContinue) {
            Write-Host "Base environment location:"
            conda info --base
          } else {
            Write-Host "Conda not found..."
          }

          # Show PowerShell profiles
          $profilePaths = @($PROFILE.CurrentUserAllHosts, $PROFILE.CurrentUserCurrentHost)
          foreach ($profilePath in $profilePaths) {
            if (Test-Path $profilePath) {
              Write-Host "Profile: $profilePath"
              Get-Content $profilePath
            }
          }

      - name: Test Windows Release .bat Installer
        env:
          REMOTE_PS: ${{ github.event_name == 'pull_request' && github.event.pull_request.head.repo.full_name || github.repository }}
          BRANCH_PS: ${{ github.event_name == 'pull_request' && github.event.pull_request.head.ref || github.ref_name }}
          GITHUB_CI: true
        run: |
          Write-Host "Testing Windows .bat release installer from: $env:REMOTE_PS/$env:BRANCH_PS"
          
          # Set execution policy
          Set-ExecutionPolicy -ExecutionPolicy RemoteSigned -Scope CurrentUser -Force
          
          # Download the .bat installer
          $batUrl = "https://raw.githubusercontent.com/$env:REMOTE_PS/$env:BRANCH_PS/windows_releases/install_first_year.bat"
          $tempBat = "$env:TEMP\install_first_year_test.bat"
          
          Write-Host "Downloading .bat installer from: $batUrl"
          Invoke-WebRequest -Uri $batUrl -OutFile $tempBat -UseBasicParsing
          
          # Modify the .bat file to use the current PR branch instead of main
          $batContent = Get-Content $tempBat -Raw
          $modifiedBat = $batContent -replace 'dtudk/pythonsupport-scripts/main', "$env:REMOTE_PS/$env:BRANCH_PS" -replace '"dtudk/pythonsupport-scripts"', "`"$env:REMOTE_PS`"" -replace '"main"', "`"$env:BRANCH_PS`""
          Set-Content -Path $tempBat -Value $modifiedBat
          
          Write-Host "Modified .bat file to use repository: $env:REMOTE_PS and branch: $env:BRANCH_PS"
          
          Write-Host "Running .bat installer (modified for CI testing)..."
          
          # Execute the .bat file in a way that captures output
          cmd.exe /c "$tempBat"

      - name: Verify VS Code (fresh shell test)
        run: |
          Write-Host "Testing VS Code from fresh PowerShell session..."
          
          # Test VS Code command availability in fresh shell (the real test)
          $vscodeTest = Start-Process -FilePath "powershell.exe" -ArgumentList "-Command", "& { Get-Command code -ErrorAction SilentlyContinue; exit `$LASTEXITCODE }" -Wait -PassThru -WindowStyle Hidden
          
          if ($vscodeTest.ExitCode -eq 0) {
            Write-Host "✓ VS Code 'code' command available in fresh shell" -ForegroundColor Green
            
            # Get version from fresh shell
            $versionTest = Start-Process -FilePath "powershell.exe" -ArgumentList "-Command", "& { code --version 2>&1; exit `$LASTEXITCODE }" -Wait -PassThru -WindowStyle Hidden -RedirectStandardOutput "vscode_version.txt"
            if (Test-Path "vscode_version.txt") {
              $version = Get-Content "vscode_version.txt" -Raw
              Write-Host "VS Code version from fresh shell: $version" -ForegroundColor Gray
              Remove-Item "vscode_version.txt" -ErrorAction SilentlyContinue
            }
          } else {
            Write-Host "✗ VS Code 'code' command not available in fresh shell" -ForegroundColor Red
            Write-Host "This means VS Code is not properly configured for command-line access" -ForegroundColor Red
            exit 1
          }

      - name: Verify conda (fresh shell test)
        run: |
          Write-Host "Testing conda from fresh PowerShell session..."
          
          # Test conda command availability in fresh shell (the real test)
          $condaTest = Start-Process -FilePath "powershell.exe" -ArgumentList "-Command", "& { Get-Command conda -ErrorAction SilentlyContinue; exit `$LASTEXITCODE }" -Wait -PassThru -WindowStyle Hidden
          
          if ($condaTest.ExitCode -eq 0) {
            Write-Host "✓ conda command available in fresh shell" -ForegroundColor Green
            
            # Get conda info from fresh shell
            $infoTest = Start-Process -FilePath "powershell.exe" -ArgumentList "-Command", "& { conda --version; conda info --base; exit `$LASTEXITCODE }" -Wait -PassThru -WindowStyle Hidden -RedirectStandardOutput "conda_info.txt"
            if (Test-Path "conda_info.txt") {
              $info = Get-Content "conda_info.txt" -Raw
              Write-Host "Conda info from fresh shell:" -ForegroundColor Gray
              Write-Host $info -ForegroundColor Gray
              Remove-Item "conda_info.txt" -ErrorAction SilentlyContinue
            }
          } else {
            Write-Host "✗ conda command not available in fresh shell" -ForegroundColor Red
            Write-Host "This means conda is not properly added to PATH" -ForegroundColor Red
            exit 1
          }

      - name: Verify python (3.11) - THE REAL TEST
        run: |
          Write-Host "Testing Python from fresh PowerShell session - the REAL test..." -ForegroundColor Yellow
          
          $expectedVersion = "3.11"
          
          # Test what 'python' defaults to in a fresh shell (the real test!)
          Write-Host "Testing 'python' command in fresh shell..."
          $pythonTest = Start-Process -FilePath "powershell.exe" -ArgumentList "-Command", "& { python --version 2>&1; exit `$LASTEXITCODE }" -Wait -PassThru -WindowStyle Hidden -RedirectStandardOutput "python_version.txt"
          
          if ($pythonTest.ExitCode -eq 0 -and (Test-Path "python_version.txt")) {
            $pythonVersion = Get-Content "python_version.txt" -Raw
            Write-Host "✓ 'python' command available in fresh shell: $pythonVersion" -ForegroundColor Green
            
            if ($pythonVersion -match $expectedVersion) {
              Write-Host "✓ 'python' defaults to correct version ($expectedVersion)" -ForegroundColor Green
            } else {
              Write-Host "✗ 'python' defaults to wrong version: $pythonVersion (expected $expectedVersion)" -ForegroundColor Red
            }
            Remove-Item "python_version.txt" -ErrorAction SilentlyContinue
          } else {
            Write-Host "✗ 'python' command not available in fresh shell" -ForegroundColor Red
          }
          
          # Test what 'python3' defaults to in a fresh shell
          Write-Host "Testing 'python3' command in fresh shell..."
          $python3Test = Start-Process -FilePath "powershell.exe" -ArgumentList "-Command", "& { python3 --version 2>&1; exit `$LASTEXITCODE }" -Wait -PassThru -WindowStyle Hidden -RedirectStandardOutput "python3_version.txt"
          
          if ($python3Test.ExitCode -eq 0 -and (Test-Path "python3_version.txt")) {
            $python3Version = Get-Content "python3_version.txt" -Raw  
            Write-Host "✓ 'python3' command available in fresh shell: $python3Version" -ForegroundColor Green
            
            if ($python3Version -match $expectedVersion) {
              Write-Host "✓ 'python3' defaults to correct version ($expectedVersion)" -ForegroundColor Green
            } else {
              Write-Host "✗ 'python3' defaults to wrong version: $python3Version (expected $expectedVersion)" -ForegroundColor Red
            }
            Remove-Item "python3_version.txt" -ErrorAction SilentlyContinue
          } else {
            Write-Host "✗ 'python3' command not available in fresh shell" -ForegroundColor Red
          }
          
          # Test conda base environment python in fresh shell
          Write-Host "Testing conda base environment python in fresh shell..."
          $condaEnvTest = Start-Process -FilePath "powershell.exe" -ArgumentList "-Command", "& { python --version 2>&1; exit `$LASTEXITCODE }" -Wait -PassThru -WindowStyle Hidden -RedirectStandardOutput "conda_python_version.txt"
          
          if ($condaEnvTest.ExitCode -eq 0 -and (Test-Path "conda_python_version.txt")) {
            $condaPythonVersion = Get-Content "conda_python_version.txt" -Raw
            Write-Host "✓ Conda base environment python version: $condaPythonVersion" -ForegroundColor Green
            Remove-Item "conda_python_version.txt" -ErrorAction SilentlyContinue
          } else {
            Write-Host "⚠ Could not test conda base environment python in fresh shell" -ForegroundColor Yellow
          }
          
          Write-Host "" 
          Write-Host "Fresh shell testing completed - this shows what users will actually get!" -ForegroundColor Cyan

          # Verify Python package imports from fresh shell
          Write-Host "Testing Python package imports from fresh shell..."
          $packageTest = Start-Process -FilePath "powershell.exe" -ArgumentList "-Command", "& { python -c `"import pandas, scipy, statsmodels, uncertainties; print('Packages imported successfully')`" 2>&1; exit `$LASTEXITCODE }" -Wait -PassThru -WindowStyle Hidden -RedirectStandardOutput "package_test.txt"
          
          if ($packageTest.ExitCode -eq 0 -and (Test-Path "package_test.txt")) {
            $packageResult = Get-Content "package_test.txt" -Raw
            Write-Host "✓ Python packages imported successfully: $packageResult" -ForegroundColor Green
            Remove-Item "package_test.txt" -ErrorAction SilentlyContinue
          } else {
            Write-Host "✗ Failed to import Python packages in fresh shell" -ForegroundColor Red
            if (Test-Path "package_test.txt") {
              $errorOutput = Get-Content "package_test.txt" -Raw
              Write-Host "Error output: $errorOutput" -ForegroundColor Red
              Remove-Item "package_test.txt" -ErrorAction SilentlyContinue
            }
            exit 1
          }

