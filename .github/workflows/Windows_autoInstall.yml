name: Windows_autoInstall

defaults:
  run:
    shell: pwsh

on:
  pull_request:
    branches: [ "main" ]
    paths:
      - 'Windows/**'
      - '.github/workflows/Windows_autoInstall.yml'
  push:
    branches: [ "main" ]
    paths:
      - 'Windows/**'
      - '.github/workflows/Windows_autoInstall.yml'
  workflow_dispatch:
    inputs:
      pkg_path:
        description: 'Path to PKG file to test'
        required: false
        type: string

env:
  PYTHON_VERSION_PS: "3.12"
  PIS_ENV: "CI"

jobs:
  test-installer:
    name: ${{ matrix.scenario }}
    runs-on: windows-latest
    
    strategy:
      fail-fast: false
      matrix:
        setup: [clean, existing-conda]
        include:
          - setup: clean
            scenario: "Clean Installation"
          - setup: existing-conda
            scenario: "Existing Conda (Manual Uninstall)"
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup test scenario - Clean Installation
        if: matrix.setup == 'clean'
        run: |
          Write-Host "Setting up clean installation test"
          # Remove any existing conda
          if (Get-Command conda -ErrorAction SilentlyContinue) {
            conda init --reverse --all
          }

      - name: Setup test scenario - Existing Conda
        if: matrix.setup == 'existing-conda'
        run: |
          Write-Host "Setting up existing conda test"
          # Install miniconda to simulate existing installation
          $minicondaUrl = "https://repo.anaconda.com/miniconda/Miniconda3-latest-Windows-x86_64.exe"
          $installerPath = "$env:TEMP\miniconda.exe"
          Write-Host "Downloading Miniconda..."
          Invoke-WebRequest -Uri $minicondaUrl -OutFile $installerPath -UseBasicParsing
          Write-Host "Installing Miniconda..."
          Start-Process -FilePath $installerPath -ArgumentList "/S /D=$env:USERPROFILE\miniconda3" -Wait
          Remove-Item $installerPath -Force

      - name: Run DTU Python Installer
        env:
          REMOTE_PS: ${{ github.event_name == 'pull_request' && github.event.pull_request.head.repo.full_name || github.repository }}
          BRANCH_PS: ${{ github.event_name == 'pull_request' && github.event.pull_request.head.ref || github.ref_name }}
        run: |
          Write-Host "Testing ${{ matrix.scenario }} from: $env:REMOTE_PS/$env:BRANCH_PS"
          
          # Download and execute the installer with parameters
          $InstallScript = Invoke-WebRequest -Uri "https://raw.githubusercontent.com/$env:REMOTE_PS/$env:BRANCH_PS/Windows/install.ps1" -UseBasicParsing
          $TempScript = "$env:TEMP\install_test.ps1"
          Set-Content -Path $TempScript -Value $InstallScript.Content
          
          if ("${{ matrix.setup }}" -eq "existing-conda") {
            # For existing conda scenario, we expect the installer to abort
            Write-Host "Expected behavior: Installation should abort due to existing conda"
            & $TempScript -RemoteRepo $env:REMOTE_PS -Branch $env:BRANCH_PS -PythonVersion "3.12" -Force
            if ($LASTEXITCODE -eq 1) {
              Write-Host "âœ“ Installation correctly aborted due to existing conda"
              exit 0  # Test passed - installer correctly aborted
            } else {
              Write-Host "ERROR: Expected exit code 1, got: $LASTEXITCODE"
              exit 1
            }
          } else {
            # For clean installation, run normally  
            & $TempScript -RemoteRepo $env:REMOTE_PS -Branch $env:BRANCH_PS -PythonVersion "3.12" -Force
          }
          
          Remove-Item $TempScript -Force -ErrorAction SilentlyContinue

      - name: Verify Installation - VS Code
        if: matrix.setup == 'clean'
        run: |
          Write-Host "Verifying VS Code installation..."
          try {
            code --version
          } catch {
            Write-Host "ERROR: VS Code not installed properly"
            exit 1
          }

      - name: Verify Installation - Conda
        if: matrix.setup == 'clean'
        run: |
          Write-Host "Verifying conda installation..."
          try {
            Get-Command conda
            conda --version
            conda info --base
            
            # Should be miniforge
            if (!(conda info --base | Select-String "miniforge3")) {
              Write-Host "ERROR: Not using miniforge"
              exit 1
            }
          } catch {
            Write-Host "ERROR: Conda not found"
            exit 1
          }

      - name: Verify Installation - Python Version
        if: matrix.setup == 'clean'
        run: |
          Write-Host "Verifying Python version..."
          
          # Verify the installed Python version
          $expectedVersion = "3.12"
          $installedVersion = (python --version).Split(" ")[1].Trim()
          if (-not $installedVersion.StartsWith($expectedVersion)) {
            Write-Host "ERROR: Python version ($installedVersion) does not match expected ($expectedVersion)"
            Write-Host "PATH: $env:PATH"
            exit 1
          }
          Write-Host "âœ“ Correct Python version $installedVersion"

      - name: Verify Installation - DTU Packages
        if: matrix.setup == 'clean'
        run: |
          Write-Host "Verifying DTU packages..."
          try {
            python -c "import dtumathtools, pandas, scipy, statsmodels, uncertainties; print('âœ“ All DTU packages imported successfully')"
          } catch {
            Write-Host "ERROR: Failed to import DTU packages"
            conda list | Select-String -Pattern "(dtumathtools|pandas|scipy|statsmodels|uncertainties)"
            exit 1
          }

      - name: Verify Installation - VS Code Extensions
        if: matrix.setup == 'clean'
        run: |
          Write-Host "Verifying VS Code extensions..."
          code --list-extensions
          
          # Should have Python extension at minimum
          if (!(code --list-extensions | Select-String "ms-python.python")) {
            Write-Host "ERROR: Python extension not installed"
            exit 1
          }
          Write-Host "âœ“ Python extension installed"

      - name: Final Verification Summary
        if: matrix.setup == 'clean'
        run: |
          Write-Host ""
          Write-Host "ðŸŽ‰ Installation Verification Complete!"
          Write-Host "======================================"
          Write-Host "âœ“ VS Code: $(code --version | Select-Object -First 1)"
          Write-Host "âœ“ Conda: $(conda --version)"
          Write-Host "âœ“ Python: $(python --version)"
          Write-Host "âœ“ DTU Packages: All imported successfully"
          Write-Host "âœ“ VS Code Extensions: Python extension installed"
          Write-Host ""
          Write-Host "Test scenario '${{ matrix.scenario }}' passed all verifications!"

