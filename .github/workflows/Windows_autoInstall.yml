name: Windows_autoInstall

defaults:
  run:
    shell: pwsh

on:
  pull_request:
    branches: [ "main" ]
    paths:
      - 'Windows/**'
      - '.github/workflows/Windows_autoInstall.yml'
      - 'dev_plan_miniforge_windows.md'
  push:
    branches: [ "main" ]
    paths:
      - 'Windows/**'
      - '.github/workflows/Windows_autoInstall.yml'
      - 'dev_plan_miniforge_windows.md'

env:
  PYTHON_VERSION_PS: "3.11"
  PIS_ENV: "CI"

jobs:
  test-orchestrator:
    name: Test Windows First Year Orchestrator
    runs-on: windows-latest
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Remove conda (if present)
        run: |
          if (Get-Command conda -ErrorAction SilentlyContinue) {
            Write-Host "Base environment location:"
            conda info --base

            Write-Host "Removing conda from the environment..."
            # try and disable things in the boot-up scripts
            conda init --reverse --all
          }

          # Show PowerShell profiles
          $profilePaths = @($PROFILE.CurrentUserAllHosts, $PROFILE.CurrentUserCurrentHost)
          foreach ($profilePath in $profilePaths) {
            if (Test-Path $profilePath) {
              Write-Host "Profile: $profilePath"
              Get-Content $profilePath
            }
          }

      - name: Check for conda
        run: |
          $env:Path -split ';' | Where-Object { $_ -like "*conda*" } | ForEach-Object { Write-Host "Conda path: $_" }
          if (Get-Command conda -ErrorAction SilentlyContinue) {
            Write-Host "Base environment location:"
            conda info --base
          } else {
            Write-Host "Conda not found..."
          }

          # Show PowerShell profiles
          $profilePaths = @($PROFILE.CurrentUserAllHosts, $PROFILE.CurrentUserCurrentHost)
          foreach ($profilePath in $profilePaths) {
            if (Test-Path $profilePath) {
              Write-Host "Profile: $profilePath"
              Get-Content $profilePath
            }
          }

      - name: Run Windows First Year Orchestrator
        env:
          REMOTE_PS: ${{ github.event_name == 'pull_request' && github.event.pull_request.head.repo.full_name || github.repository }}
          BRANCH_PS: ${{ github.event_name == 'pull_request' && github.event.pull_request.head.ref || github.ref_name }}
          GITHUB_CI: true
        run: |
          Write-Host "Testing Windows First Year Orchestrator from: $env:REMOTE_PS/$env:BRANCH_PS"
          
          # Set execution policy
          Set-ExecutionPolicy -ExecutionPolicy RemoteSigned -Scope CurrentUser -Force
          
          # Run the orchestrator
          $orchestratorUrl = "https://raw.githubusercontent.com/$env:REMOTE_PS/$env:BRANCH_PS/Windows/Components/orchestrators/first_year_students.ps1"
          Invoke-Expression (Invoke-WebRequest -Uri $orchestratorUrl -UseBasicParsing).Content

      - name: Verify VS Code
        run: |
          code --version
          if ($LASTEXITCODE -ne 0) {
            Write-Host "VS Code not installed correctly"
            exit $LASTEXITCODE
          }

      - name: Verify conda
        run: |
          conda --version
          if ($LASTEXITCODE -ne 0) {
            Write-Host "Conda not installed correctly"
            exit $LASTEXITCODE
          }

          # Some more output
          conda --version
          conda info --base

      - name: Verify python (3.11)
        run: |
          python --version

          # Verify the installed Python version
          $EXPECTED_VERSION = "3.11"
          $INSTALLED_VERSION = (python --version 2>&1) -replace "Python ", ""
          if ($INSTALLED_VERSION -notlike "$EXPECTED_VERSION*") {
            Write-Host "Installed Python version ($INSTALLED_VERSION) does not match expected version ($EXPECTED_VERSION)"
            exit 1
          }
          Write-Host "Correct Python version $INSTALLED_VERSION is installed."

          # Verify Python package imports
          python -c "import dtumathtools, pandas, scipy, statsmodels, uncertainties; print('Packages imported successfully')"
          if ($LASTEXITCODE -ne 0) {
            Write-Host "Failed to import Python packages"
            exit 1
          }

  test-components:
    name: Test Windows Components Individually
    runs-on: windows-latest
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set execution policy
        run: |
          Set-ExecutionPolicy -ExecutionPolicy RemoteSigned -Scope CurrentUser -Force

      - name: Test Python Component
        env:
          REMOTE_PS: ${{ github.event_name == 'pull_request' && github.event.pull_request.head.repo.full_name || github.repository }}
          BRANCH_PS: ${{ github.event_name == 'pull_request' && github.event.pull_request.head.ref || github.ref_name }}
        run: |
          Write-Host "Testing Python component..."
          $pythonUrl = "https://raw.githubusercontent.com/$env:REMOTE_PS/$env:BRANCH_PS/Windows/Components/Python/install.ps1"
          Invoke-Expression (Invoke-WebRequest -Uri $pythonUrl -UseBasicParsing).Content

      - name: Test VSCode Component
        env:
          REMOTE_PS: ${{ github.event_name == 'pull_request' && github.event.pull_request.head.repo.full_name || github.repository }}
          BRANCH_PS: ${{ github.event_name == 'pull_request' && github.event.pull_request.head.ref || github.ref_name }}
        run: |
          Write-Host "Testing VSCode component..."
          $vscodeUrl = "https://raw.githubusercontent.com/$env:REMOTE_PS/$env:BRANCH_PS/Windows/Components/VSC/install.ps1"
          Invoke-Expression (Invoke-WebRequest -Uri $vscodeUrl -UseBasicParsing).Content

      - name: Test First Year Setup Component
        env:
          REMOTE_PS: ${{ github.event_name == 'pull_request' && github.event.pull_request.head.repo.full_name || github.repository }}
          BRANCH_PS: ${{ github.event_name == 'pull_request' && github.event.pull_request.head.ref || github.ref_name }}
        run: |
          Write-Host "Testing First Year Setup component..."
          $firstYearUrl = "https://raw.githubusercontent.com/$env:REMOTE_PS/$env:BRANCH_PS/Windows/Components/Python/first_year_setup.ps1"
          Invoke-Expression (Invoke-WebRequest -Uri $firstYearUrl -UseBasicParsing).Content

      - name: Verify All Components
        run: |
          # Verify conda
          conda --version
          
          # Verify VSCode
          code --version
          
          # Verify Python and packages
          conda activate first_year
          python --version
          python -c "import dtumathtools, pandas, scipy, statsmodels, uncertainties; print('All packages verified')"