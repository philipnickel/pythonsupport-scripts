name: Mac Components Tests

defaults:
  run:
    shell: bash -l {0}

# Disabled - only using mac_orchestrators.yml and test-pkg-installer.yml
on:
  workflow_dispatch:
    inputs:
      force_run:
        description: 'Force run this disabled workflow'
        required: true
        default: 'false'

env:
  PYTHON_VERSION_PS: "3.11"
  PIS_ENV: "CI"

# Re-enabled after PKG installer testing completed successfully

jobs:
  test-homebrew:
    name: Test Homebrew Component
    # Temporarily disabled during PKG development - only mac_orchestrators.yml should run
    # TO RE-ENABLE: Change "if: false" back to "if: true" or remove the line entirely
    if: false
    runs-on: macos-latest
    
    steps:
      - name: Remove existing Homebrew
        run: |
          if command -v brew > /dev/null; then
            echo "Removing existing Homebrew..."
            /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/uninstall.sh)" || true
          fi

      - name: Install Homebrew Component
        env:
          REMOTE_PS: ${{ github.event_name == 'pull_request' && github.event.pull_request.head.repo.full_name || github.repository }}
          BRANCH_PS: ${{ github.event_name == 'pull_request' && github.event.pull_request.head.ref || github.ref_name }}
        run: |
          echo "Testing Homebrew from: $REMOTE_PS/$BRANCH_PS"
          /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/$REMOTE_PS/$BRANCH_PS/MacOS/Components/Homebrew/install.sh)"

      - name: Verify Homebrew Installation
        run: |
          brew --version
          brew doctor || echo "Homebrew doctor found issues (expected in CI)"

  test-python:
    name: Test Python Component
    # Temporarily disabled during PKG development - only mac_orchestrators.yml should run
    # TO RE-ENABLE: Change "if: false" back to "if: true" or remove the line entirely
    if: false
    runs-on: macos-latest
    
    steps:
      - name: Clean existing conda installations
        run: |
          if command -v conda > /dev/null; then
            conda init --reverse --all || true
          fi
          rm -rf ~/miniconda* ~/anaconda* ~/.conda ~/.condarc || true

      - name: Install Python Component
        env:
          REMOTE_PS: ${{ github.event_name == 'pull_request' && github.event.pull_request.head.repo.full_name || github.repository }}
          BRANCH_PS: ${{ github.event_name == 'pull_request' && github.event.pull_request.head.ref || github.ref_name }}
        run: |
          echo "Testing Python from: $REMOTE_PS/$BRANCH_PS"
          /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/$REMOTE_PS/$BRANCH_PS/MacOS/Components/Python/install.sh)"

      - name: Verify Python Installation
        run: |
          source ~/.bashrc || true
          which conda
          conda --version
          conda info --base
          
          # Verify basic Python functionality
          python3 --version
          python3 -c "print('Python is working!')"
          
          # Verify conda functionality
          conda list

  test-vscode:
    name: Test VSCode Component
    # Temporarily disabled during PKG development - only mac_orchestrators.yml should run
    # TO RE-ENABLE: Change "if: false" back to "if: true" or remove the line entirely
    if: false
    runs-on: macos-latest
    
    steps:
      - name: Remove existing VS Code
        run: |
          rm -rf "/Applications/Visual Studio Code.app" || true
          rm -rf ~/.vscode* || true

      - name: Install VSCode Component
        env:
          REMOTE_PS: ${{ github.event_name == 'pull_request' && github.event.pull_request.head.repo.full_name || github.repository }}
          BRANCH_PS: ${{ github.event_name == 'pull_request' && github.event.pull_request.head.ref || github.ref_name }}
        run: |
          echo "Testing VSCode from: $REMOTE_PS/$BRANCH_PS"
          /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/$REMOTE_PS/$BRANCH_PS/MacOS/Components/VSC/install.sh)"

      - name: Install VSCode Extensions
        env:
          REMOTE_PS: ${{ github.event_name == 'pull_request' && github.event.pull_request.head.repo.full_name || github.repository }}
          BRANCH_PS: ${{ github.event_name == 'pull_request' && github.event.pull_request.head.ref || github.ref_name }}
        run: |
          echo "Testing VSCode Extensions from: $REMOTE_PS/$BRANCH_PS"
          /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/$REMOTE_PS/$BRANCH_PS/MacOS/Components/VSC/install_extensions.sh)"

      - name: Verify VSCode Installation
        run: |
          code --version
          
          # Verify extensions
          extensions=("ms-python.python" "ms-toolsai.jupyter" "tomoki1207.pdf")
          for ext in "${extensions[@]}"; do
            if ! code --list-extensions | grep -q "^$ext$"; then
              echo "Extension $ext not installed"
              exit 1
            else
              echo "OK: Extension $ext is installed"
            fi
          done

  test-vscode-clean-uninstall:
    name: Test VSCode Clean Uninstall
    # Temporarily disabled during PKG development - only mac_orchestrators.yml should run
    # TO RE-ENABLE: Change "if: false" back to "if: true" or remove the line entirely
    if: false
    runs-on: macos-latest
    
    steps:
      - name: Install VSCode Component (for testing uninstall)
        env:
          REMOTE_PS: ${{ github.event_name == 'pull_request' && github.event.pull_request.head.repo.full_name || github.repository }}
          BRANCH_PS: ${{ github.event_name == 'pull_request' && github.event.pull_request.head.ref || github.ref_name }}
        run: |
          echo "Installing VSCode for uninstall testing from: $REMOTE_PS/$BRANCH_PS"
          /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/$REMOTE_PS/$BRANCH_PS/MacOS/Components/VSC/install.sh)"

      - name: Install VSCode Extensions (for testing uninstall)
        env:
          REMOTE_PS: ${{ github.event_name == 'pull_request' && github.event.pull_request.head.repo.full_name || github.repository }}
          BRANCH_PS: ${{ github.event_name == 'pull_request' && github.event.pull_request.head.ref || github.ref_name }}
        run: |
          echo "Installing VSCode Extensions for uninstall testing from: $REMOTE_PS/$BRANCH_PS"
          /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/$REMOTE_PS/$BRANCH_PS/MacOS/Components/VSC/install_extensions.sh)"

      - name: Verify Installation Before Uninstall
        run: |
          # Verify VS Code is installed and working
          if ! command -v code >/dev/null 2>&1; then
            echo "VS Code not found before uninstall test"
            exit 1
          fi
          
          code --version || { echo "VS Code not working properly"; exit 1; }
          echo "✓ VS Code installation verified before uninstall"
          
          # Check that some expected files exist
          if [ ! -e "/Applications/Visual Studio Code.app" ]; then
            echo "VS Code.app not found in Applications"
            exit 1
          fi
          echo "✓ VS Code.app found in Applications"

      - name: Run VSCode Clean Uninstall
        env:
          REMOTE_PS: ${{ github.event_name == 'pull_request' && github.event.pull_request.head.repo.full_name || github.repository }}
          BRANCH_PS: ${{ github.event_name == 'pull_request' && github.event.pull_request.head.ref || github.ref_name }}
        run: |
          echo "Testing VSCode Clean Uninstall from: $REMOTE_PS/$BRANCH_PS"
          /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/$REMOTE_PS/$BRANCH_PS/MacOS/Components/VSC/clean_uninstall.sh)"

      - name: Verify Clean Uninstall
        run: |
          # Verify VS Code application is removed
          if [ -e "/Applications/Visual Studio Code.app" ]; then
            echo "✗ VS Code.app still exists after uninstall"
            exit 1
          fi
          echo "✓ VS Code.app successfully removed"
          
          # Verify the two user data folders are removed (as per official VS Code docs)
          if [ -d "$HOME/.vscode" ]; then
            echo "✗ ~/.vscode directory still exists"
            exit 1
          fi
          echo "✓ ~/.vscode directory removed"
          
          if [ -d "$HOME/Library/Application Support/Code" ]; then
            echo "✗ Application Support/Code directory still exists"
            exit 1
          fi
          echo "✓ Application Support/Code directory removed"
          
          echo "✓ VS Code clean uninstall verification completed successfully"

  test-latex-minimal:
    name: Test LaTeX Minimal Installation
    # Temporarily disabled during PKG development - only mac_orchestrators.yml should run
    # TO RE-ENABLE: Change "if: false" back to "if: true" or remove the line entirely
    if: false
    runs-on: macos-latest
    
    steps:
      - name: Clean existing conda installations
        run: |
          if command -v conda > /dev/null; then
            conda init --reverse --all || true
          fi
          rm -rf ~/miniconda* ~/anaconda* ~/.conda ~/.condarc || true

      - name: Install Python Component (dependency for LaTeX)
        env:
          REMOTE_PS: ${{ github.event_name == 'pull_request' && github.event.pull_request.head.repo.full_name || github.repository }}
          BRANCH_PS: ${{ github.event_name == 'pull_request' && github.event.pull_request.head.ref || github.ref_name }}
        run: |
          echo "Installing Python dependency from: $REMOTE_PS/$BRANCH_PS"
          /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/$REMOTE_PS/$BRANCH_PS/MacOS/Components/Python/install.sh)"

      - name: Install LaTeX Minimal Component
        env:
          REMOTE_PS: ${{ github.event_name == 'pull_request' && github.event.pull_request.head.repo.full_name || github.repository }}
          BRANCH_PS: ${{ github.event_name == 'pull_request' && github.event.pull_request.head.ref || github.ref_name }}
        run: |
          echo "Testing LaTeX Minimal from: $REMOTE_PS/$BRANCH_PS"
          /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/$REMOTE_PS/$BRANCH_PS/MacOS/Components/Latex/minimal_install.sh)"

      - name: Test PDF Export from Jupyter Notebook
        env:
          REMOTE_PS: ${{ github.event_name == 'pull_request' && github.event.pull_request.head.repo.full_name || github.repository }}
          BRANCH_PS: ${{ github.event_name == 'pull_request' && github.event.pull_request.head.ref || github.ref_name }}
        run: |
          # Source conda environment
          source ~/.bashrc || true
          eval "$(conda shell.bash hook)" || true
          
          echo "Testing PDF export functionality with minimal LaTeX installation..."
          /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/$REMOTE_PS/$BRANCH_PS/MacOS/Components/Latex/test_pdf_export.sh)"

  test-latex-full:
    name: Test LaTeX Full Installation
    # Temporarily disabled during PKG development - only mac_orchestrators.yml should run
    # TO RE-ENABLE: Change "if: false" back to "if: true" or remove the line entirely
    if: false
    runs-on: macos-latest
    
    steps:
      - name: Clean existing conda installations
        run: |
          if command -v conda > /dev/null; then
            conda init --reverse --all || true
          fi
          rm -rf ~/miniconda* ~/anaconda* ~/.conda ~/.condarc || true

      - name: Install Python Component (dependency for LaTeX)
        env:
          REMOTE_PS: ${{ github.event_name == 'pull_request' && github.event.pull_request.head.repo.full_name || github.repository }}
          BRANCH_PS: ${{ github.event_name == 'pull_request' && github.event.pull_request.head.ref || github.ref_name }}
        run: |
          echo "Installing Python dependency from: $REMOTE_PS/$BRANCH_PS"
          /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/$REMOTE_PS/$BRANCH_PS/MacOS/Components/Python/install.sh)"

      - name: Install LaTeX Full Component
        env:
          REMOTE_PS: ${{ github.event_name == 'pull_request' && github.event.pull_request.head.repo.full_name || github.repository }}
          BRANCH_PS: ${{ github.event_name == 'pull_request' && github.event.pull_request.head.ref || github.ref_name }}
        run: |
          echo "Testing LaTeX Full from: $REMOTE_PS/$BRANCH_PS"
          /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/$REMOTE_PS/$BRANCH_PS/MacOS/Components/Latex/full_install.sh)"

      - name: Test PDF Export from Jupyter Notebook
        env:
          REMOTE_PS: ${{ github.event_name == 'pull_request' && github.event.pull_request.head.repo.full_name || github.repository }}
          BRANCH_PS: ${{ github.event_name == 'pull_request' && github.event.pull_request.head.ref || github.ref_name }}
        run: |
          # Source conda environment
          source ~/.bashrc || true
          eval "$(conda shell.bash hook)" || true
          
          echo "Testing PDF export functionality with full LaTeX installation..."
          /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/$REMOTE_PS/$BRANCH_PS/MacOS/Components/Latex/test_pdf_export.sh)"

  test-python-uninstall:
    name: Test Python Uninstall
    # Temporarily disabled during PKG development - only mac_orchestrators.yml should run
    # TO RE-ENABLE: Change "if: false" back to "if: true" or remove the line entirely
    if: false
    runs-on: macos-latest
    
    steps:
      - name: Clean existing installations
        run: |
          if command -v conda > /dev/null; then
            conda init --reverse --all || true
          fi
          rm -rf ~/miniconda* ~/anaconda* ~/.conda ~/.condarc || true

      - name: Install Python Component
        env:
          REMOTE_PS: ${{ github.event_name == 'pull_request' && github.event.pull_request.head.repo.full_name || github.repository }}
          BRANCH_PS: ${{ github.event_name == 'pull_request' && github.event.pull_request.head.ref || github.ref_name }}
        run: |
          echo "Installing Python from: $REMOTE_PS/$BRANCH_PS"
          /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/$REMOTE_PS/$BRANCH_PS/MacOS/Components/Python/install.sh)"

      - name: Verify Installation Before Uninstall
        run: |
          source ~/.bashrc || true
          
          # Verify conda is installed
          which conda || { echo "Conda not installed"; exit 1; }
          conda --version || { echo "Conda not working"; exit 1; }
          
          # Check what type of conda installation we have
          echo "Conda installation details:"
          which conda
          conda info --base
          
          # Verify either miniconda directory OR homebrew conda exists
          if ls ~/ | grep -q miniconda; then
            echo "✓ Found miniconda installation in home directory"
          elif which conda | grep -q homebrew; then
            echo "✓ Found Homebrew-managed conda installation"
          else
            echo "✗ Could not identify conda installation type"
            exit 1
          fi
          
          echo "✓ Python/conda installation verified before uninstall"

      - name: Test Conda Uninstall
        env:
          REMOTE_PS: ${{ github.event_name == 'pull_request' && github.event.pull_request.head.repo.full_name || github.repository }}
          BRANCH_PS: ${{ github.event_name == 'pull_request' && github.event.pull_request.head.ref || github.ref_name }}
        run: |
          echo "Testing conda uninstall from: $REMOTE_PS/$BRANCH_PS"
          /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/$REMOTE_PS/$BRANCH_PS/MacOS/Components/Python/uninstall_conda.sh)"

      - name: Verify Conda Uninstall
        run: |
          # Check if conda is still available
          echo "Checking if conda was removed..."
          if command -v conda > /dev/null; then
            echo "ℹ️  Conda still available (may be Homebrew-managed, which uninstall script doesn't remove)"
            which conda
          else
            echo "✓ Conda command no longer available"
          fi
          
          # Verify miniconda directories are removed (main target of uninstall script)
          if ls ~/ | grep -q miniconda; then
            echo "✗ Miniconda directories still exist after uninstall"
            ls -la ~/ | grep miniconda
            exit 1
          else
            echo "✓ Miniconda directories successfully removed"
          fi
          
          # Verify shell configuration is cleaned
          if grep -q "conda initialize" ~/.bashrc 2>/dev/null; then
            echo "✗ Conda initialization still in ~/.bashrc"
            exit 1
          else
            echo "✓ Shell configuration cleaned"
          fi
          
          echo "✓ Conda uninstall verification completed successfully"

      - name: Test Python Uninstall
        env:
          REMOTE_PS: ${{ github.event_name == 'pull_request' && github.event.pull_request.head.repo.full_name || github.repository }}
          BRANCH_PS: ${{ github.event_name == 'pull_request' && github.event.pull_request.head.ref || github.ref_name }}
        run: |
          echo "Testing Python uninstall from: $REMOTE_PS/$BRANCH_PS"
          /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/$REMOTE_PS/$BRANCH_PS/MacOS/Components/Python/uninstall_python.sh)"

      - name: Verify Python Uninstall
        run: |
          # Verify common Python installation directories are removed
          if [ -d ~/Library/Python ]; then
            echo "✗ ~/Library/Python still exists after uninstall"
            exit 1
          fi
          
          if ls /Applications/ 2>/dev/null | grep -q Python; then
            echo "✗ Python applications still exist in /Applications/"
            ls /Applications/ | grep Python
            exit 1
          fi
          
          if [ -d /Library/Frameworks/Python.framework ]; then
            echo "✗ Python framework still exists after uninstall"
            exit 1
          fi
          
          echo "✓ Python uninstall verification completed successfully"

  test-diagnostics:
    name: Test Diagnostics
    # Temporarily disabled during PKG development - only mac_orchestrators.yml should run
    # TO RE-ENABLE: Change "if: false" back to "if: true" or remove the line entirely
    if: false
    runs-on: macos-latest
    needs: [test-homebrew, test-python, test-vscode]
    
    steps:
      - name: Run Diagnostics
        env:
          REMOTE_PS: ${{ github.event_name == 'pull_request' && github.event.pull_request.head.repo.full_name || github.repository }}
          BRANCH_PS: ${{ github.event_name == 'pull_request' && github.event.pull_request.head.ref || github.ref_name }}
        run: |
          echo "Testing Diagnostics from: $REMOTE_PS/$BRANCH_PS"
          /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/$REMOTE_PS/$BRANCH_PS/MacOS/Components/Diagnostics/run.sh)"

